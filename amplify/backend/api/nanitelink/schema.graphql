# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# type Blog @model {
#   id: ID!
#   name: String!
#   posts: [Post] @hasMany
# }

# type Post @model {
#   id: ID!
#   title: String!
#   blog: Blog @belongsTo
#   comments: [Comment] @hasMany
# }

# type Comment @model {
#   id: ID!
#   post: Post @belongsToa
#   content: String!
# }

type TOptionValue {
  value: String
  label: String
}

enum InputType {
  select
  text
  readio
  checkbox
  textarea
  date
  datetime
  time
}

type Parameter @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  id: ID!
  inputType: InputType!
  label: String!
  defaultValue: String
  optionValues: [TOptionValue]
  module: Module! @belongsTo
}

type Module @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  id: ID!
  name: String!
  parameters: [Parameter] @hasMany
  menus: [Menu] @hasMany
}

type RouteParameter @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  name: String!
  value: String!
}

type Route @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  id: ID!
  module: Module! @hasOne
  action: String!
  path: String!
  isAdmin: Boolean!
  parameters: [RouteParameter] @hasMany
}

enum MenuType {
  Internal
  External
}

type TParameterValue {
  id: String!
  value: String
}

type Menu @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  id: ID!
  name: String!
  parent: String
  menuType: MenuType!
  module: Module! @belongsTo
  moduleId: String!
  parameterSettings: [TParameterValue]
  url: String!
  sortOrder: Int
}

type Document @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: private, operations: [read, create] },
  { allow: owner, operations: [update, delete], ownerField: "author" },
  { allow: public, operations: [read] }
]) {
  id: ID!
  title: String
  content: String
  author: String
}

enum SortOrder {
  asc
  desc
}

type TSortItem {
  item: String!
  sort: SortOrder!
}

enum BoardType {
  default
  anonymous
  consultation
}

type BoardCatgory @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  id: ID!
  name: String!
  parent: BoardCatgory @belongsTo
  children: [BoardCatgory]! @hasMany
  sortOrder: Int!
}

type Board @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: public, operations: [read] }
]) {
  #PRIMARY
  id: ID!
  title: String!
  header: String
  footer: String
  #SECONDARY
  listViewItems: [String]!
  listSort: TSortItem!
  excludeNoticeFlag: Boolean!
  type: BoardType!
  category: [BoardCatgory]! @hasMany
  #PERMISSION
  # - TODO
  #POINTS
  # - TODO
}

type Attachment @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: private, operations: [read, create] },
  { allow: owner, operations: [update, delete], ownerField: "author" },
  { allow: public, operations: [read] }
]) {
  id: ID!
  filename: String!
  filetype: String!
  path: String!
}

type BoardItem @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: private, operations: [read, create] },
  { allow: owner, operations: [update, delete], ownerField: "author" },
  { allow: public, operations: [read] }
]) {
  id: ID!
  board: Board! @hasOne
  category: BoardCatgory @hasOne
  title: String!
  content: String!
  tag: String!
  author: String!
  attachments: [Attachment] @hasMany
  isNotice: Boolean
}

type BoardItemComment @model @auth(rules: [
  { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
  { allow: private, operations: [read, create] },
  { allow: owner, operations: [update, delete], ownerField: "author" },
  { allow: public, operations: [read] }
]) {
  id: ID!
  boardItem: BoardItem! @hasOne
  comment: String!
  author: String!
}